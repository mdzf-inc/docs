// Code generated by protoc-gen-typescript-http. DO NOT EDIT.
/* eslint-disable camelcase */

export type ProductQualityProblemType =
  // 未知
  | "UNKNOWN"
  // 产品破损
  | "PRODUCT_BROKEN"
  // 产品次品
  | "PRODUCT_DEFECT"
  // 产品少配件
  | "PRODUCT_MISSING_PARTS"
  // 产品少货
  | "PRODUCT_MISSING_GOODS"
  // 产品错误
  | "PRODUCT_WRONG"
  // 包装强度差
  | "PACKAGE_STRENGTH"
  // 包装封口不严
  | "PACKAGE_SEALING"
  // 包装印刷不合格
  | "PACKAGE_PRINTING"
  // 包装尺寸不合格
  | "PACKAGE_SIZE"
  // 包装其他
  | "PACKAGE_OTHER"
  // 产品标签条码缺少
  | "PRODUCT_LABEL_BARCODE_MISSING"
  // 产品标签条码错误
  | "PRODUCT_LABEL_BARCODE_WRONG"
  // 产品标签条码重复
  | "PRODUCT_LABEL_BARCODE_DUPLICATE"
  // 产品标签少69码
  | "PRODUCT_LABEL_MISSING_69"
  // 产品标签其他
  | "PRODUCT_LABEL_OTHER"
  // 箱码缺少
  | "BOX_CODE_MISSING"
  // 箱码错误
  | "BOX_CODE_WRONG"
  // 箱码不一致
  | "BOX_CODE_INCONSISTENT"
  // 箱码位置错误
  | "BOX_CODE_POSITION"
  // 箱码其他
  | "BOX_CODE_OTHER"
  // 其他
  | "OTHER";
export type ProductMaterial = {
  id: number | undefined;
  name: string | undefined;
  standard: string | undefined;
  mustContainProductionLicense: boolean | undefined;
};

export type Catalog = {
  id: number | undefined;
  name: string | undefined;
  children: Catalog[] | undefined;
  isLeaf: boolean | undefined;
};

export type CreateCatalogRequest = {
  name: string | undefined;
  parentId: number | undefined;
};

export type DeleteCatalogRequest = {
  catalogId: number | undefined;
};

export type UpdateCatalogRequest = {
  catalogId: number | undefined;
  name: string | undefined;
  parentId: number | undefined;
};

export type ListCatalogsRequest = {
};

export type ListCatalogsReply = {
  items: Catalog[] | undefined;
};

export type CreateMaterialRequest = {
  //
  // Behaviors: REQUIRED
  name: string | undefined;
  standard: string | undefined;
  mustContainProductionLicense: boolean | undefined;
};

export type ListMaterialsReply = {
  items: ProductMaterial[] | undefined;
};

export type UpdateMaterialRequest = {
  //
  // Behaviors: REQUIRED
  materialId: number | undefined;
  //
  // Behaviors: REQUIRED
  name: string | undefined;
  standard: string | undefined;
  mustContainProductionLicense: boolean | undefined;
};

export type DeleteMaterialRequest = {
  //
  // Behaviors: REQUIRED
  materialId: number | undefined;
};

export type CreateRequest = {
  // 产品ID集合
  //
  // Behaviors: REQUIRED
  sampleIds: number[] | undefined;
};

export type ProductBatch = {
  // 编码
  no: string | undefined;
  // 分类
  categoryId: number | undefined;
  // 品名
  name: string | undefined;
  // 多张图
  imageUrls: string[] | undefined;
  // 适用范围
  scopes: string[] | undefined;
  // 规格
  specification: string | undefined;
  // 规格码
  specificationCode: string | undefined;
  // 系列
  series: string | undefined;
  // 风格
  style: string | undefined;
  // 原创
  originalDesign: string | undefined;
  // 需求渠道
  demandChannel: string | undefined;
  // 季节
  season: string | undefined;
  // 条码
  barcode: string | undefined;
  // 长度
  length: number | undefined;
  // 宽度
  width: number | undefined;
  // 高度
  height: number | undefined;
  // 重量
  weight: number | undefined;
  // 含包装重量
  includingPackagingWeight: number | undefined;
  // 含箱重
  includingCartonWeight: number | undefined;
  // 含包装尺寸
  includingPackagingSize: string | undefined;
  // 含外箱尺寸
  includingCartonSize: string | undefined;
  // 容量
  capacity: number | undefined;
  // 工艺
  craftsmanship: string | undefined;
  // 包装
  package: string | undefined;
  // 标签
  saleLabel: string | undefined;
  // 采购负责人ID
  purchaserId: number | undefined;
  // 包装费
  packagingFee: number | undefined;
  // 零售价
  retailPrice: number | undefined;
  // 供货价
  supplyPrice: number | undefined;
  // 清仓价
  clearancePrice: number | undefined;
  // 备注
  comment: string | undefined;
  // 供应商ID
  supplierId: number | undefined;
  // 货号
  articleNo: string | undefined;
  // 最新采购价
  unitPrice: number | undefined;
  // 控价
  controlPrice: number | undefined;
  // 装箱率
  quantityPerBox: number | undefined;
  // 生产周期
  productionCycle: number | undefined;
  // 起订量
  minOrderQuantity: number | undefined;
  // 材质
  materialIds: number[] | undefined;
  // 材质
  material: string | undefined;
  // 执行标准:非食品级的可以使用企业标准编号
  standards: string[] | undefined;
  // 生产许可证
  productionLicense: string | undefined;
  // 是否品牌持有人
  isBrandOwner: boolean | undefined;
};

export type BatchCreateRequest = {
  //
  // Behaviors: REQUIRED
  products: ProductBatch[] | undefined;
};

export type BatchCreateReply = {
  message: string | undefined;
};

export type BatchUpdateRequest = {
  //
  // Behaviors: REQUIRED
  products: UpdateRequest[] | undefined;
};

export type UpdateRequest = {
  // ID
  productId: number | undefined;
  no: string | undefined;
  // 分类
  categoryId?: number;
  // 品名
  name?: string;
  // 多张图
  imageUrls: string[] | undefined;
  // 适用范围
  scopes: string[] | undefined;
  // 规格
  specification?: string;
  // 规格码
  specificationCode?: string;
  // 系列
  series?: string;
  // 风格
  style?: string;
  // 原创
  originalDesign?: string;
  // 需求渠道
  demandChannel?: string;
  // 季节
  season?: string;
  // 条码
  barcode?: string;
  // 长度
  length?: number;
  // 宽度
  width?: number;
  // 高度
  height?: number;
  // 重量
  weight?: number;
  // 含包装重量
  includingPackagingWeight?: number;
  // 含箱重
  includingCartonWeight?: number;
  // 含包装尺寸
  includingPackagingSize?: string;
  // 含外箱尺寸
  includingCartonSize?: string;
  // 容量
  capacity?: number;
  // 工艺
  craftsmanship?: string;
  // 包装
  package?: string;
  // 标签
  saleLabel?: string;
  // 采购负责人ID
  purchaserId?: number;
  // 包装费
  packagingFee?: number;
  // 零售价
  retailPrice?: number;
  // 供货价
  supplyPrice?: number;
  // 清仓价
  clearancePrice?: number;
  // 备注
  comment?: string;
  // 供应商ID
  supplierId?: number;
  // 货号
  articleNo?: string;
  // 最新采购价
  unitPrice?: number;
  // 控价
  controlPrice?: number;
  // 装箱率
  quantityPerBox?: number;
  // 生产周期
  productionCycle?: number;
  // 起订量
  minOrderQuantity?: number;
  // 材质
  materialIds: number[] | undefined;
  // 材质
  material?: string;
  // 执行标准:非食品级的可以使用企业标准编号
  standards: string[] | undefined;
  // 生产许可证
  productionLicense?: string;
  // 是否品牌持有人
  isBrandOwner?: boolean;
};

export type BatchUpdateReply = {
  message: string | undefined;
};

export type DeleteBatchRequest = {
  //
  // Behaviors: REQUIRED
  productIds: number[] | undefined;
};

export type BatchUpdateRetailPriceAndSaleLabelRequest = {
  items: BatchUpdateRetailPriceAndSaleLabelRequest_Item[] | undefined;
};

export type BatchUpdateRetailPriceAndSaleLabelRequest_Item = {
  productNo: string | undefined;
  saleLabel: string | undefined;
  retailPrice: string | undefined;
};

export type BatchUpdatePurchaserRequest = {
  productIds: number[] | undefined;
  purchaserId: number | undefined;
};

export type UpdateSaleLabelRequest = {
  // ID
  productIds: number[] | undefined;
  // 状态 1-10
  saleLabel: string | undefined;
};

export type SyncWdtRequest = {
  // ID
  productIds: number[] | undefined;
};

export type SyncWdtReply = {
  message: string | undefined;
};

export type GetRequest = {
  productId: number | undefined;
};

export type ListRequest = {
  //
  // Behaviors: REQUIRED
  pagination: apicommonv1_Pagination | undefined;
  // 供应商id
  supplierId?: number;
  // 编码 ^.{2,30}$
  nos: string[] | undefined;
  // 品名 ^.{2,30}$
  name?: string;
  // 分类 不是id
  categoryId?: string;
  // 分组
  saleLabel?: string;
  purchaserId?: number;
  package?: string;
  isNew?: boolean;
  isSyncWdt?: number;
  material?: string;
  specificationCode?: string;
  barcode?: string;
  craftsmanship?: string;
  articleNo?: string;
};

export type apicommonv1_Pagination = {
  // 页数
  //
  // Behaviors: REQUIRED
  page: number | undefined;
  // 每页数据量 <200
  //
  // Behaviors: REQUIRED
  size: number | undefined;
};

export type ListReply = {
  totalSize: number | undefined;
  items: apicommonv1_Product[] | undefined;
};

// 产品
export type apicommonv1_Product = {
  id: number | undefined;
  createTime: string | undefined;
  updateTime: string | undefined;
  // 编码
  no: string | undefined;
  categoryId: number | undefined;
  // 分类
  categoryIds: string[] | undefined;
  // 品名
  name: string | undefined;
  // 多张图
  imageUrls: string[] | undefined;
  // 适用范围
  scopes: string[] | undefined;
  // 规格
  specification: string | undefined;
  // 规格码
  specificationCode: string | undefined;
  // 系列
  series: string | undefined;
  // 风格
  style: string | undefined;
  // 原创
  originalDesign: string | undefined;
  // 需求渠道
  demandChannel: string | undefined;
  // 季节
  season: string | undefined;
  // 条码
  barcode: string | undefined;
  // 长度
  length: number | undefined;
  // 宽度
  width: number | undefined;
  // 高度
  height: number | undefined;
  // 重量
  weight: number | undefined;
  // 含包装重量
  includingPackagingWeight: number | undefined;
  // 含箱重
  includingCartonWeight: number | undefined;
  // 含包装尺寸
  includingPackagingSize: string | undefined;
  // 含外箱尺寸
  includingCartonSize: string | undefined;
  // 容量
  capacity: number | undefined;
  // 工艺
  craftsmanship: string | undefined;
  // 包装
  package: string | undefined;
  // 标签
  saleLabel: string | undefined;
  // 采购负责人ID
  purchaserId: number | undefined;
  // 包装费
  packagingFee: number | undefined;
  // 零售价
  retailPrice: number | undefined;
  // 供货价
  supplyPrice: number | undefined;
  // 清仓价
  clearancePrice: number | undefined;
  // 供货价是否已定
  supplyPriceFinished: boolean | undefined;
  // 备注
  comment: string | undefined;
  // 是否同步旺店通
  isSyncWdt: boolean | undefined;
  // 供应商ID
  supplierId: number | undefined;
  // 货号
  articleNo: string | undefined;
  // 最新采购价
  unitPrice: number | undefined;
  // 控价
  controlPrice: number | undefined;
  // 装箱率
  quantityPerBox: number | undefined;
  // 生产周期
  productionCycle: number | undefined;
  // 起订量
  minOrderQuantity: number | undefined;
  // 最新采购总成本
  totalCost: number | undefined;
  // 采购次数
  purchaseCount: number | undefined;
  // 材质
  materialIds: number[] | undefined;
  // 材质
  material: string | undefined;
  // 执行标准:非食品级的可以使用企业标准编号
  standards: string[] | undefined;
  // 生产许可证
  productionLicense: string | undefined;
  // 是否品牌持有人
  isBrandOwner: boolean | undefined;
  // 今天销量
  todaySales: number | undefined;
  // 7天销量
  sevenDaysSales: number | undefined;
  // 14天销量
  fourteenDaysSales: number | undefined;
  // 30天销量
  thirtyDaysSales: number | undefined;
  // 总销量
  totalSales: number | undefined;
  // 销量更新时间
  salesUpdateTime: string | undefined;
  // 库存
  stock: number | undefined;
  // 在途采
  purchaseOnway: number | undefined;
  // 锁定数量
  lockQuantity: number | undefined;
  // 可用库存
  availableStock: number | undefined;
  // 质量问题数量
  qualityProblemQuantity: number | undefined;
  // 质量问题率
  qualityProblemRate: number | undefined;
  // 差评数量
  badReviewQuantity: number | undefined;
  // 差评率
  badReviewRate: number | undefined;
  // 破损数量
  breakageQuantity: number | undefined;
  // 破损率
  breakageRate: number | undefined;
  qualityProblemUpdateTime: string | undefined;
  // 质检等级: 1全检 2抽检 3免检
  qualityInspectionLevel: number | undefined;
  // 预警规则
  qualityProblemWarningRule: string | undefined;
  // QualityProblemWarningTime 质量问题预警时间
  qualityProblemWarningTime: string | undefined;
  // 质量问题正在预警
  isQualityProblemWarning: boolean | undefined;
  skuQuantity: number | undefined;
};

export type ListStockRequest = {
  //
  // Behaviors: REQUIRED
  id?: number;
  //
  // Behaviors: REQUIRED
  no?: string;
};

export type FavoriteRequest = {
  //
  // Behaviors: REQUIRED
  topic: string | undefined;
  // 产品id
  productIds: number[] | undefined;
};

export type GetByBarcodeRequest = {
  //
  // Behaviors: REQUIRED
  barcode: string | undefined;
};

export type ListProductPositionStocksRequest = {
  //
  // Behaviors: REQUIRED
  pagination: ListProductPositionStocksRequest_Pagination | undefined;
  // 产品id
  //
  // Behaviors: REQUIRED
  productId: number | undefined;
  // 仓库id
  //
  // Behaviors: REQUIRED
  warehouseId: number | undefined;
};

export type ListProductPositionStocksRequest_Pagination = {
  // 页数
  page: number | undefined;
  // 每页数据量 <200
  size: number | undefined;
};

export type ListProductPositionStocksReply = {
  total: number | undefined;
  items: ListProductPositionStocksReply_Item[] | undefined;
};

export type ListProductPositionStocksReply_Item = {
  // 仓库id
  warehouseId: number | undefined;
  // 货区【前端显示】
  zoneNo: string | undefined;
  // 货位 【前端显示】
  positionNo: string | undefined;
  // 库存量 【前端显示】
  stockNum: number | undefined;
  // 占用库存量 【前端显示】
  reserveNum: number | undefined;
};

export type ProductSupplyPrice = {
  id: number | undefined;
  updateTime: string | undefined;
  typeId: number | undefined;
  typeName: string | undefined;
  price: number | undefined;
  comment: string | undefined;
  productId: number | undefined;
};

export type ListSupplyPricesRequest = {
  // 产品id
  //
  // Behaviors: REQUIRED
  productId: number | undefined;
};

export type ListSupplyPricesReply = {
  items: ProductSupplyPrice[] | undefined;
};

export type CreateSupplyPriceRequest = {
  //
  // Behaviors: REQUIRED
  productId: number | undefined;
  //
  // Behaviors: REQUIRED
  typeId: number | undefined;
  //
  // Behaviors: REQUIRED
  price: number | undefined;
  //
  // Behaviors: REQUIRED
  comment: string | undefined;
};

export type DeleteSupplyPriceRequest = {
  //
  // Behaviors: REQUIRED
  productId: number | undefined;
  //
  // Behaviors: REQUIRED
  supplyPriceId: number | undefined;
};

export type UpdateSupplyPriceRequest = {
  //
  // Behaviors: REQUIRED
  productId: number | undefined;
  //
  // Behaviors: REQUIRED
  supplyPriceId: number | undefined;
  //
  // Behaviors: REQUIRED
  price: number | undefined;
  //
  // Behaviors: REQUIRED
  comment: string | undefined;
};

export type SupplyPriceType = {
  id: number | undefined;
  name: string | undefined;
};

export type ListSupplyPriceTypesReply = {
  items: SupplyPriceType[] | undefined;
};

export type CreateSupplyPriceTypeRequest = {
  //
  // Behaviors: REQUIRED
  name: string | undefined;
};

export type DeleteSupplyPriceTypeRequest = {
  //
  // Behaviors: REQUIRED
  typeId: number | undefined;
};

export type UpdateSupplyPriceTypeRequest = {
  //
  // Behaviors: REQUIRED
  typeId: number | undefined;
  //
  // Behaviors: REQUIRED
  name: string | undefined;
};

export type ListProductRequest = {
  //
  // Behaviors: REQUIRED
  pagination: apicommonv1_Pagination | undefined;
  // 供应商id
  supplierId?: number;
  nos: string[] | undefined;
  name?: string;
  categoryId?: string;
  saleLabel?: string;
  material?: string;
  specificationCode?: string;
  barcode?: string;
  qualityProblemRates: number[] | undefined;
  badReviewRates: number[] | undefined;
  breakageRates: number[] | undefined;
  qualityInspectionLevel?: number;
  qualityProblemUpdateTimes: string[] | undefined;
};

export type ListProductReply = {
  total: number | undefined;
  items: apicommonv1_Product[] | undefined;
};

export type UpdateProductQualityInspectionLevelRequest = {
  items: UpdateProductQualityInspectionLevelRequest_Item[] | undefined;
};

export type UpdateProductQualityInspectionLevelRequest_Item = {
  // 商品id
  id?: number;
  // 商品no
  no?: string;
  // 质检等级 1:全检 2:抽检 3:免检
  qualityInspectionLevel: number | undefined;
};

export type UpdateProductAfterSalesWarningRuleRequest = {
  items: UpdateProductAfterSalesWarningRuleRequest_Item[] | undefined;
};

export type UpdateProductAfterSalesWarningRuleRequest_Item = {
  // 商品id
  id?: number;
  // 商品no
  no?: string;
  // 规则 使用@符号触发
  qualityProblemWarningRule: string | undefined;
};

// 售后预警
export type ProductAfterSalesWarning = {
  id: number | undefined;
  // 预警时间
  createTime: string | undefined;
  updateTime: string | undefined;
  // 日期
  date: string | undefined;
  // 来源: 0-未知 1-默认规则 2-自定义规则
  source: number | undefined;
  // 规则快照
  rule: string | undefined;
  // 快照单价
  unitPrice: number | undefined;
  // 7天销量
  sevenDaysSales: number | undefined;
  // 14天销量
  fourteenDaysSales: number | undefined;
  // 30天销量
  thirtyDaysSales: number | undefined;
  // 质量问题数量
  qualityProblemQuantity: number | undefined;
  // 质量问题率
  qualityProblemRate: number | undefined;
  // 差评数量
  badReviewQuantity: number | undefined;
  // 差评率
  badReviewRate: number | undefined;
  // 破损数量
  breakageQuantity: number | undefined;
  // 破损率
  breakageRate: number | undefined;
  qualityProblemUpdateTime: string | undefined;
  // 质检等级: 1全检 2抽检 3免检
  qualityInspectionLevel: number | undefined;
  // 预警规则
  qualityProblemWarningRule: string | undefined;
  // 产品
  product: apicommonv1_Product | undefined;
};

// 产品入库清单
export type ProductStockinOrder = {
  id: number | undefined;
  createTime: string | undefined;
  updateTime: string | undefined;
  // 入库时间
  stockinTime: string | undefined;
  stockinId: number | undefined;
  // 入库单
  stockinNo: string | undefined;
  // 采购单
  purchaseOrderNo: string | undefined;
  // 操作人
  operatorName: string | undefined;
  warehouseId: number | undefined;
  // 仓库名称
  warehouseName: string | undefined;
  // 数量
  quantity: number | undefined;
  // 货位
  positionNo: string | undefined;
  // 0未检 1已检
  status: number | undefined;
  // 质检时间
  checkTime: string | undefined;
  // 质检人
  checkerName: string | undefined;
  // 产品
  product: apicommonv1_Product | undefined;
};

export type ProductAfterSalesOrder = {
  id: number | undefined;
  createTime: string | undefined;
  updateTime: string | undefined;
  shopId: number | undefined;
  shopName: string | undefined;
  warehouseId: number | undefined;
  warehouseName: string | undefined;
  type: number | undefined;
  orderId: number | undefined;
  orderNo: string | undefined;
  bizTime: string | undefined;
  productId: number | undefined;
  productNo: string | undefined;
  quantity: number | undefined;
  isPart: boolean | undefined;
  unitPrice: number | undefined;
  totalPrice: number | undefined;
  description: string | undefined;
  imageUrls: string[] | undefined;
  creatorName: string | undefined;
  auditorName: string | undefined;
  // 产品
  product: apicommonv1_Product | undefined;
};

export type ProductQualityProblem = {
  id: number | undefined;
  createTime: string | undefined;
  updateTime: string | undefined;
  // 登记人
  creatorId: number | undefined;
  creatorName: string | undefined;
  // 仓库id
  warehouseId: number | undefined;
  warehouseName: string | undefined;
  // 货位
  positionNo: string | undefined;
  // 供应商ID
  supplierId: number | undefined;
  // 供应商no
  supplierNo: string | undefined;
  // 数量
  quantity: number | undefined;
  // 单价
  unitPrice: number | undefined;
  totalPrice: number | undefined;
  type: ProductQualityProblemType | undefined;
  // 具体描述
  description: string | undefined;
  // 图片
  imageUrls: string[] | undefined;
  // 来源
  source: number | undefined;
  // 0未处理 1已处理
  status: number | undefined;
  // 审核时间
  auditTime: string | undefined;
  // 处理意见
  auditOpinion: string | undefined;
  // 审核人id
  auditorId: number | undefined;
  // 审核人
  auditorName: string | undefined;
  // 调拨状态: 0-未调拨 1-已调拨 [小程序显示]
  stockTransferStatus: number | undefined;
  // 调拨单号
  stockTransferNo: string | undefined;
  stockTransferTime: string | undefined;
  // 调拨前往亏损仓的数量
  stockTransferToDefectiveQuantity: number | undefined;
  // 调拨回往正品仓的数量
  stockTransferToNormalQuantity: number | undefined;
  // 产品
  product: apicommonv1_Product | undefined;
};

export type ListProductAfterSalesOrderRequest = {
  //
  // Behaviors: REQUIRED
  pagination: apicommonv1_Pagination | undefined;
  productIds: number[] | undefined;
  productNos: string[] | undefined;
  types: number[] | undefined;
  dateRange: string[] | undefined;
};

export type ListProductAfterSalesOrderReply = {
  total: number | undefined;
  items: ProductAfterSalesOrder[] | undefined;
};

export type ListProductAfterSalesWarningRequest = {
  //
  // Behaviors: REQUIRED
  pagination: apicommonv1_Pagination | undefined;
  productIds: number[] | undefined;
  productNos: string[] | undefined;
  dateRange: string[] | undefined;
  // 质量问题率大于等于
  qualityProblemRateGte?: number;
  // 质量问题数大于等于
  qualityProblemQuantityGte?: number;
  // 中差评率大于等于
  badReviewRateGte?: number;
  // 中差评数大于等于
  badReviewQuantityGte?: number;
  // 破损率大于等于
  breakageRateGte?: number;
  // 破损数大于等于
  breakageQuantityGte?: number;
  // 7天销量大于等于
  sevenDaysSalesGte?: number;
  // 14天销量大于等于
  fourteenDaysSalesGte?: number;
  // 30天销量大于等于
  thirtyDaysSalesGte?: number;
  // 采购价大于等于
  unitPriceGte?: number;
  sort?: ListProductAfterSalesWarningRequest_Sort;
};

export type ListProductAfterSalesWarningRequest_Sort = {
  qualityProblemRate?: string;
  badReviewRate?: string;
  breakageRate?: string;
  qualityProblemQuantity?: string;
  badReviewQuantity?: string;
  breakageQuantity?: string;
};

export type ListProductAfterSalesWarningReply = {
  total: number | undefined;
  items: ProductAfterSalesWarning[] | undefined;
};

export type StatsProductAfterSalesWarningCountRequest = {
  dateRange: string[] | undefined;
  // 产品no
  productIds: number[] | undefined;
};

export type StatsProductAfterSalesWarningCountReply = {
  total: number | undefined;
  warningCount: number | undefined;
};

export type StatsProductAfterSalesWarningTrendRequest = {
  type: StatsProductAfterSalesWarningTrendRequest_Type | undefined;
  dateRange: string[] | undefined;
  // 产品no
  productNos: string[] | undefined;
};

export type StatsProductAfterSalesWarningTrendRequest_Type =
  // 按天
  | "DAY"
  // 按周
  | "WEEK"
  // 按月
  | "MONTH";
export type StatsProductAfterSalesWarningTrendReply = {
  xAxis: string[] | undefined;
  warningCount: number[] | undefined;
  productCount: number[] | undefined;
};

export type ListProductStockinOrderRequest = {
  //
  // Behaviors: REQUIRED
  pagination: apicommonv1_Pagination | undefined;
  productIds: number[] | undefined;
  // 产品no数组
  productNos: string[] | undefined;
  // 货位数组
  positionNos: string[] | undefined;
  // 状态 0-未检 1-已检
  status?: number;
  // 
  purchaseOrderNo?: string;
  // 日期范围
  dateRange: string[] | undefined;
  // 仓库id
  warehouseId?: number;
};

export type ListProductStockinOrderReply = {
  total: number | undefined;
  items: ProductStockinOrder[] | undefined;
};

export type MarkProductStockinOrderAsCompletedRequest = {
  // 待检记录ID数组
  //
  // Behaviors: REQUIRED
  stockinIds: number[] | undefined;
};

export type CreateProductQualityProblemRequest = {
  // 仓库id
  //
  // Behaviors: REQUIRED
  warehouseId: number | undefined;
  // 货位编号
  //
  // Behaviors: REQUIRED
  positionNo: string | undefined;
  // 产品条码
  //
  // Behaviors: REQUIRED
  productId: number | undefined;
  // 数量
  quantity: number | undefined;
  // 问题类型
  type: ProductQualityProblemType | undefined;
  // 具体描述
  description: string | undefined;
  // 图片urls
  imageUrls: string[] | undefined;
  // 0 入库质检 1 日常巡检
  source: number | undefined;
};

export type UpdateProductQualityProblemRequest = {
  //
  // Behaviors: REQUIRED
  problemId: number | undefined;
  // 问题类型
  type: ProductQualityProblemType | undefined;
  // 具体描述
  description: string | undefined;
  // 图片urls
  imageUrls: string[] | undefined;
};

// 只能删除自己的且是未处理的
export type DeleteProductQualityProblemRequest = {
  //
  // Behaviors: REQUIRED
  problemId: number | undefined;
};

export type ListProductQualityProblemRequest = {
  //
  // Behaviors: REQUIRED
  pagination: apicommonv1_Pagination | undefined;
  productIds: number[] | undefined;
  productNos: string[] | undefined;
  warehouseId?: number;
  supplierId?: number;
  dateRange: string[] | undefined;
  types: ProductQualityProblemType[] | undefined;
  status?: number;
  source?: number;
  // 只看自己的数据
  mode?: ListProductQualityProblemRequest_Mode;
};

export type ListProductQualityProblemRequest_Mode =
  // 所有数据
  | "ALL"
  // 自己的数据
  | "ME";
export type ListProductQualityProblemReply = {
  total: number | undefined;
  items: ProductQualityProblem[] | undefined;
};

export type GetProductQualityProblemRequest = {
  //
  // Behaviors: REQUIRED
  problemId: number | undefined;
};

export type GetProductStatisticsRequest = {
  dateRange: string[] | undefined;
};

export type GetProductStatisticsReply = {
  // 售后预警次数
  afterSalesWarningCount: number | undefined;
  // 入库总数
  stockinTotal: number | undefined;
  // 已质检数量
  stockinCheckedCount: number | undefined;
  // 质检问题待审单数
  qualityProblemCount: number | undefined;
};

export type GetProductAfterSalesStatisticsGroupByRequest = {
  dateRange: string[] | undefined;
  groupBy: GetProductAfterSalesStatisticsGroupByRequest_GroupBy | undefined;
  // 售后问题类型
  afterSalesOrderTypes: number[] | undefined;
};

export type GetProductAfterSalesStatisticsGroupByRequest_GroupBy =
  // 产品
  | "PRODUCT"
  // 供应商
  | "SUPPLIER"
  // 负责人
  | "PERSON"
  // 分类
  | "CATALOG";
export type GetProductAfterSalesStatisticsGroupByReply = {
  groups: GetProductAfterSalesStatisticsGroupByReply_Group[] | undefined;
  amounts: number[] | undefined;
  quantities: number[] | undefined;
};

export type GetProductAfterSalesStatisticsGroupByReply_Group = {
  // id
  id: number | undefined;
  // 名称
  name: string | undefined;
  // 
  imageUrl?: string;
};

export type GetProductPreAndAfterSalesTrendStatisticsRequest = {
  type: GetProductPreAndAfterSalesTrendStatisticsRequest_Type | undefined;
  dateRange: string[] | undefined;
  // 店铺
  shopIds: number[] | undefined;
  // 产品no
  productNos: string[] | undefined;
  // 售后问题类型
  afterSalesOrderTypes: number[] | undefined;
};

export type GetProductPreAndAfterSalesTrendStatisticsRequest_Type =
  // 按天
  | "DAY"
  // 按周
  | "WEEK"
  // 按月
  | "MONTH";
export type GetProductPreAndAfterSalesTrendStatisticsReply = {
  xAxis: string[] | undefined;
  salesAmount: number[] | undefined;
  afterSalesAmount: number[] | undefined;
  salesProductQuantity: number[] | undefined;
  afterSalesProductQuantity: number[] | undefined;
  afterSalesRate: number[] | undefined;
};

export type ListProductStockinStatisticsDetailByProductRequest = {
  //
  // Behaviors: REQUIRED
  pagination: apicommonv1_Pagination | undefined;
  dateRange: string[] | undefined;
  warehouseId?: number;
  // 空则不限制 0-未检 1-已检
  types: number[] | undefined;
};

export type ListProductStockinStatisticsDetailByProductReply = {
  items: ListProductStockinStatisticsDetailByProductReply_Item[] | undefined;
};

export type ListProductStockinStatisticsDetailByProductReply_Item = {
  product: apicommonv1_Product | undefined;
  quantity: number | undefined;
};

export type ListProductStockinStatisticsDetailByPositionRequest = {
  //
  // Behaviors: REQUIRED
  pagination: apicommonv1_Pagination | undefined;
  dateRange: string[] | undefined;
  warehouseId?: number;
  // 空则不限制 0-未检 1-已检
  types: number[] | undefined;
};

export type ListProductStockinStatisticsDetailByPositionReply = {
  items: ListProductStockinStatisticsDetailByPositionReply_Item[] | undefined;
};

export type ListProductStockinStatisticsDetailByPositionReply_Item = {
  // 货位
  positionNo: string | undefined;
  // 数量
  quantity: number | undefined;
};

export type GetProductQualityStatisticsRequest = {
  dateRange: string[] | undefined;
  // 质量问题率大于等于
  qualityProblemRateGte?: number;
  // 质量问题数大于等于
  qualityProblemQuantityGte?: number;
  // 中差评率大于等于
  badReviewRateGte?: number;
  // 中差评数大于等于
  badReviewQuantityGte?: number;
  // 破损率大于等于
  breakageRateGte?: number;
  // 破损数大于等于
  breakageQuantityGte?: number;
  // 7天销量大于等于
  sevenDaysSalesGte?: number;
  // 14天销量大于等于
  fourteenDaysSalesGte?: number;
  // 30天销量大于等于
  thirtyDaysSalesGte?: number;
  // 采购价大于等于
  unitPriceGte?: number;
};

export type GetProductQualityStatisticsReply = {
  total: number | undefined;
  items: GetProductQualityStatisticsReply_Item[] | undefined;
};

export type GetProductQualityStatisticsReply_Item = {
  product: apicommonv1_Product | undefined;
  // 预警次数
  warningCount: number | undefined;
};

export type ListProductAfterSalesCostStatisticsByTypeRequest = {
  dateRange: string[] | undefined;
  productNos: string[] | undefined;
  shopIds: number[] | undefined;
};

export type ListProductAfterSalesCostStatisticsByTypeReply = {
  data: ListProductAfterSalesCostStatisticsByTypeReply_Item[] | undefined;
};

export type ListProductAfterSalesCostStatisticsByTypeReply_Item = {
  value: number | undefined;
  name: string | undefined;
};

export type ListProductQualityProblemCostStatisticsByTypeRequest = {
  dateRange: string[] | undefined;
  productNos: string[] | undefined;
};

export type ListProductQualityProblemCostStatisticsByTypeReply = {
  data: ListProductQualityProblemCostStatisticsByTypeReply_Item[] | undefined;
};

export type ListProductQualityProblemCostStatisticsByTypeReply_Item = {
  value: number | undefined;
  name: string | undefined;
};

// 产品
export interface Product {
  // 新增目录
  CreateCatalog(request: CreateCatalogRequest): Promise<Catalog>;
  // 删除目录
  DeleteCatalog(request: DeleteCatalogRequest): Promise<wellKnownEmpty>;
  // 修改目录
  UpdateCatalog(request: UpdateCatalogRequest): Promise<Catalog>;
  // 获取目录列表
  ListCatalogs(request: ListCatalogsRequest): Promise<ListCatalogsReply>;
  // 创建材质
  CreateMaterial(request: CreateMaterialRequest): Promise<ProductMaterial>;
  // 删除材质
  DeleteMaterial(request: DeleteMaterialRequest): Promise<wellKnownEmpty>;
  // 修改材质
  UpdateMaterial(request: UpdateMaterialRequest): Promise<ProductMaterial>;
  // 获取材质
  ListMaterials(request: wellKnownEmpty): Promise<ListMaterialsReply>;
  // 获取供货价格类型
  ListSupplyPriceTypes(request: wellKnownEmpty): Promise<ListSupplyPriceTypesReply>;
  // 新增供货价格类型
  CreateSupplyPriceType(request: CreateSupplyPriceTypeRequest): Promise<SupplyPriceType>;
  // 删除供货价格类型
  DeleteSupplyPriceType(request: DeleteSupplyPriceTypeRequest): Promise<wellKnownEmpty>;
  // 修改供货价格类型
  UpdateSupplyPriceType(request: UpdateSupplyPriceTypeRequest): Promise<SupplyPriceType>;
  // 创建产品
  Create(request: CreateRequest): Promise<wellKnownEmpty>;
  // 批量创建
  BatchCreate(request: BatchCreateRequest): Promise<BatchCreateReply>;
  // 批量更新
  BatchUpdate(request: BatchUpdateRequest): Promise<BatchUpdateReply>;
  // 批量更新零售价与标签
  BatchUpdateRetailPriceAndSaleLabel(request: BatchUpdateRetailPriceAndSaleLabelRequest): Promise<BatchUpdateReply>;
  // 批量更新开发负责人
  BatchUpdatePurchaser(request: BatchUpdatePurchaserRequest): Promise<wellKnownEmpty>;
  // 批量更新
  DeleteBatch(request: DeleteBatchRequest): Promise<wellKnownEmpty>;
  // 更新
  Update(request: UpdateRequest): Promise<wellKnownEmpty>;
  // 更新标签
  UpdateSaleLabel(request: UpdateSaleLabelRequest): Promise<wellKnownEmpty>;
  // 同步旺店通（废弃）
  SyncWdt(request: SyncWdtRequest): Promise<SyncWdtReply>;
  // 获取产品详情
  Get(request: GetRequest): Promise<apicommonv1_Product>;
  // 获取产品列表
  List(request: ListRequest): Promise<ListReply>;
  // 收藏产品
  Favorite(request: FavoriteRequest): Promise<wellKnownEmpty>;
  // 取消收藏
  Unfavorite(request: FavoriteRequest): Promise<wellKnownEmpty>;
  // 依据主条码查找商品
  GetByBarcode(request: GetByBarcodeRequest): Promise<apicommonv1_Product>;
  // 获取产品库存货位
  ListProductPositionStocks(request: ListProductPositionStocksRequest): Promise<ListProductPositionStocksReply>;
  // 查看产品供货价组成
  ListSupplyPrices(request: ListSupplyPricesRequest): Promise<ListSupplyPricesReply>;
  // 新增供货价组成
  CreateSupplyPrice(request: CreateSupplyPriceRequest): Promise<wellKnownEmpty>;
  // 删除供货价组成
  DeleteSupplyPrice(request: DeleteSupplyPriceRequest): Promise<wellKnownEmpty>;
  // 修改供货价组成
  UpdateSupplyPrice(request: UpdateSupplyPriceRequest): Promise<wellKnownEmpty>;
  // 修改商品质检等级
  UpdateProductQualityInspectionLevel(request: UpdateProductQualityInspectionLevelRequest): Promise<wellKnownEmpty>;
  // 修改商品预警规则
  UpdateProductAfterSalesWarningRule(request: UpdateProductAfterSalesWarningRuleRequest): Promise<wellKnownEmpty>;
  // 获取商品售后单列表
  ListProductAfterSalesOrder(request: ListProductAfterSalesOrderRequest): Promise<ListProductAfterSalesOrderReply>;
  // 获取商品预警列表
  ListProductAfterSalesWarning(request: ListProductAfterSalesWarningRequest): Promise<ListProductAfterSalesWarningReply>;
  // 获取商品入库待检列表
  ListProductStockinOrder(request: ListProductStockinOrderRequest): Promise<ListProductStockinOrderReply>;
  // 标记商品入库待检记录未已完成
  MarkProductStockinOrderAsCompleted(request: MarkProductStockinOrderAsCompletedRequest): Promise<wellKnownEmpty>;
  // 提交商品质量问题
  CreateProductQualityProblem(request: CreateProductQualityProblemRequest): Promise<ProductQualityProblem>;
  // 修改商品质量问题
  UpdateProductQualityProblem(request: UpdateProductQualityProblemRequest): Promise<ProductQualityProblem>;
  // 删除商品质量问题
  DeleteProductQualityProblem(request: DeleteProductQualityProblemRequest): Promise<wellKnownEmpty>;
  // 获取商品质量问题列表
  ListProductQualityProblem(request: ListProductQualityProblemRequest): Promise<ListProductQualityProblemReply>;
  // 获取商品质量问题详情
  GetProductQualityProblem(request: GetProductQualityProblemRequest): Promise<ProductQualityProblem>;
  // 统计售后预警次数
  StatsProductAfterSalesWarningCount(request: StatsProductAfterSalesWarningCountRequest): Promise<StatsProductAfterSalesWarningCountReply>;
  // 统计售后预警趋势
  StatsProductAfterSalesWarningTrend(request: StatsProductAfterSalesWarningTrendRequest): Promise<StatsProductAfterSalesWarningTrendReply>;
  // 产品入库统计按产品聚合明细
  ListProductStockinStatisticsDetailByProduct(request: ListProductStockinStatisticsDetailByProductRequest): Promise<ListProductStockinStatisticsDetailByProductReply>;
  // 产品入库统计按货位聚合明细
  ListProductStockinStatisticsDetailByPosition(request: ListProductStockinStatisticsDetailByPositionRequest): Promise<ListProductStockinStatisticsDetailByPositionReply>;
  // 产品统计
  GetProductStatistics(request: GetProductStatisticsRequest): Promise<GetProductStatisticsReply>;
  // 依据某聚合维度统计产品售后数据
  GetProductAfterSalesStatisticsGroupBy(request: GetProductAfterSalesStatisticsGroupByRequest): Promise<GetProductAfterSalesStatisticsGroupByReply>;
  // 产品售前跟售后趋势统计
  GetProductPreAndAfterSalesTrendStatistics(request: GetProductPreAndAfterSalesTrendStatisticsRequest): Promise<GetProductPreAndAfterSalesTrendStatisticsReply>;
  // 产品质检统计
  GetProductQualityStatistics(request: GetProductQualityStatisticsRequest): Promise<GetProductQualityStatisticsReply>;
  // 产品售后成本按类型统计
  ListProductAfterSalesCostStatisticsByType(request: ListProductAfterSalesCostStatisticsByTypeRequest): Promise<ListProductAfterSalesCostStatisticsByTypeReply>;
  // 产品登记的质量问题按类型统计
  ListProductQualityProblemCostStatisticsByType(request: ListProductQualityProblemCostStatisticsByTypeRequest): Promise<ListProductQualityProblemCostStatisticsByTypeReply>;
}

type RequestType = {
  path: string;
  method: string;
  body: string | null;
};

type RequestHandler = (request: RequestType) => Promise<unknown>;

export function createProductClient(
  handler: RequestHandler
): Product {
  return {
    CreateCatalog(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `v1/products/configs/catalogs`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }) as Promise<Catalog>;
    },
    DeleteCatalog(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.catalogId) {
        throw new Error("missing required field request.catalog_id");
      }
      const path = `v1/products/configs/catalogs/${request.catalogId}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "DELETE",
        body,
      }) as Promise<wellKnownEmpty>;
    },
    UpdateCatalog(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.catalogId) {
        throw new Error("missing required field request.catalog_id");
      }
      const path = `v1/products/configs/catalogs/${request.catalogId}`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "PUT",
        body,
      }) as Promise<Catalog>;
    },
    ListCatalogs(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `v1/products/configs/catalogs`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }) as Promise<ListCatalogsReply>;
    },
    CreateMaterial(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `v1/products/configs/materials`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }) as Promise<ProductMaterial>;
    },
    DeleteMaterial(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.materialId) {
        throw new Error("missing required field request.material_id");
      }
      const path = `v1/products/configs/materials/${request.materialId}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "DELETE",
        body,
      }) as Promise<wellKnownEmpty>;
    },
    UpdateMaterial(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.materialId) {
        throw new Error("missing required field request.material_id");
      }
      const path = `v1/products/configs/materials/${request.materialId}`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "PUT",
        body,
      }) as Promise<ProductMaterial>;
    },
    ListMaterials(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `v1/products/configs/materials`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }) as Promise<ListMaterialsReply>;
    },
    ListSupplyPriceTypes(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `v1/products/configs/supply-price-types`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }) as Promise<ListSupplyPriceTypesReply>;
    },
    CreateSupplyPriceType(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `v1/products/configs/supply-price-types`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }) as Promise<SupplyPriceType>;
    },
    DeleteSupplyPriceType(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.typeId) {
        throw new Error("missing required field request.type_id");
      }
      const path = `v1/products/configs/supply-price-types/${request.typeId}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "DELETE",
        body,
      }) as Promise<wellKnownEmpty>;
    },
    UpdateSupplyPriceType(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.typeId) {
        throw new Error("missing required field request.type_id");
      }
      const path = `v1/products/configs/supply-price-types/${request.typeId}`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "PUT",
        body,
      }) as Promise<SupplyPriceType>;
    },
    Create(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `v1/products`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }) as Promise<wellKnownEmpty>;
    },
    BatchCreate(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `v1/products/batch`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }) as Promise<BatchCreateReply>;
    },
    BatchUpdate(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `v1/products/batch`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "PATCH",
        body,
      }) as Promise<BatchUpdateReply>;
    },
    BatchUpdateRetailPriceAndSaleLabel(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `v1/products/actions/batch-retail-price-and-sale-label`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "PATCH",
        body,
      }) as Promise<BatchUpdateReply>;
    },
    BatchUpdatePurchaser(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `v1/products/actions/batch-update-purchaser`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "PUT",
        body,
      }) as Promise<wellKnownEmpty>;
    },
    DeleteBatch(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `v1/products/batch`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      if (request.productIds) {
        request.productIds.forEach((x) => {
          queryParams.push(`productIds=${encodeURIComponent(x.toString())}`)
        })
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "DELETE",
        body,
      }) as Promise<wellKnownEmpty>;
    },
    Update(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.productId) {
        throw new Error("missing required field request.product_id");
      }
      const path = `v1/products/${request.productId}`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "PATCH",
        body,
      }) as Promise<wellKnownEmpty>;
    },
    UpdateSaleLabel(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `v1/products/sale-label/actions/batch-update`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "PATCH",
        body,
      }) as Promise<wellKnownEmpty>;
    },
    SyncWdt(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `v1/products/batch/sync-wdt`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "PUT",
        body,
      }) as Promise<SyncWdtReply>;
    },
    Get(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.productId) {
        throw new Error("missing required field request.product_id");
      }
      const path = `v1/products/${request.productId}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }) as Promise<apicommonv1_Product>;
    },
    List(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `v1/products`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      if (request.pagination?.page) {
        queryParams.push(`pagination.page=${encodeURIComponent(request.pagination.page.toString())}`)
      }
      if (request.pagination?.size) {
        queryParams.push(`pagination.size=${encodeURIComponent(request.pagination.size.toString())}`)
      }
      if (request.supplierId) {
        queryParams.push(`supplierId=${encodeURIComponent(request.supplierId.toString())}`)
      }
      if (request.nos) {
        request.nos.forEach((x) => {
          queryParams.push(`nos=${encodeURIComponent(x.toString())}`)
        })
      }
      if (request.name) {
        queryParams.push(`name=${encodeURIComponent(request.name.toString())}`)
      }
      if (request.categoryId) {
        queryParams.push(`categoryId=${encodeURIComponent(request.categoryId.toString())}`)
      }
      if (request.saleLabel) {
        queryParams.push(`saleLabel=${encodeURIComponent(request.saleLabel.toString())}`)
      }
      if (request.purchaserId) {
        queryParams.push(`purchaserId=${encodeURIComponent(request.purchaserId.toString())}`)
      }
      if (request.package) {
        queryParams.push(`package=${encodeURIComponent(request.package.toString())}`)
      }
      if (request.isNew) {
        queryParams.push(`isNew=${encodeURIComponent(request.isNew.toString())}`)
      }
      if (request.isSyncWdt) {
        queryParams.push(`isSyncWdt=${encodeURIComponent(request.isSyncWdt.toString())}`)
      }
      if (request.material) {
        queryParams.push(`material=${encodeURIComponent(request.material.toString())}`)
      }
      if (request.specificationCode) {
        queryParams.push(`specificationCode=${encodeURIComponent(request.specificationCode.toString())}`)
      }
      if (request.barcode) {
        queryParams.push(`barcode=${encodeURIComponent(request.barcode.toString())}`)
      }
      if (request.craftsmanship) {
        queryParams.push(`craftsmanship=${encodeURIComponent(request.craftsmanship.toString())}`)
      }
      if (request.articleNo) {
        queryParams.push(`articleNo=${encodeURIComponent(request.articleNo.toString())}`)
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }) as Promise<ListReply>;
    },
    Favorite(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `v1/user/favorite/products`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "PUT",
        body,
      }) as Promise<wellKnownEmpty>;
    },
    Unfavorite(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `v1/user/favorite/products`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      if (request.topic) {
        queryParams.push(`topic=${encodeURIComponent(request.topic.toString())}`)
      }
      if (request.productIds) {
        request.productIds.forEach((x) => {
          queryParams.push(`productIds=${encodeURIComponent(x.toString())}`)
        })
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "DELETE",
        body,
      }) as Promise<wellKnownEmpty>;
    },
    GetByBarcode(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.barcode) {
        throw new Error("missing required field request.barcode");
      }
      const path = `v1/products/barcode/${request.barcode}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }) as Promise<apicommonv1_Product>;
    },
    ListProductPositionStocks(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.productId) {
        throw new Error("missing required field request.product_id");
      }
      const path = `v1/products/${request.productId}/position-stocks`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      if (request.pagination?.page) {
        queryParams.push(`pagination.page=${encodeURIComponent(request.pagination.page.toString())}`)
      }
      if (request.pagination?.size) {
        queryParams.push(`pagination.size=${encodeURIComponent(request.pagination.size.toString())}`)
      }
      if (request.warehouseId) {
        queryParams.push(`warehouseId=${encodeURIComponent(request.warehouseId.toString())}`)
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }) as Promise<ListProductPositionStocksReply>;
    },
    ListSupplyPrices(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.productId) {
        throw new Error("missing required field request.product_id");
      }
      const path = `v1/products/${request.productId}/supply-prices`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }) as Promise<ListSupplyPricesReply>;
    },
    CreateSupplyPrice(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.productId) {
        throw new Error("missing required field request.product_id");
      }
      const path = `v1/products/${request.productId}/supply-prices`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "PUT",
        body,
      }) as Promise<wellKnownEmpty>;
    },
    DeleteSupplyPrice(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.productId) {
        throw new Error("missing required field request.product_id");
      }
      if (!request.supplyPriceId) {
        throw new Error("missing required field request.supply_price_id");
      }
      const path = `v1/products/${request.productId}/supply-prices/${request.supplyPriceId}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "DELETE",
        body,
      }) as Promise<wellKnownEmpty>;
    },
    UpdateSupplyPrice(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.productId) {
        throw new Error("missing required field request.product_id");
      }
      if (!request.supplyPriceId) {
        throw new Error("missing required field request.supply_price_id");
      }
      const path = `v1/products/${request.productId}/supply-prices/${request.supplyPriceId}`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "PATCH",
        body,
      }) as Promise<wellKnownEmpty>;
    },
    UpdateProductQualityInspectionLevel(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `v1/products/actions/quality-inspection-level`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "PUT",
        body,
      }) as Promise<wellKnownEmpty>;
    },
    UpdateProductAfterSalesWarningRule(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `v1/products/actions/after-sales-warning-rule`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "PUT",
        body,
      }) as Promise<wellKnownEmpty>;
    },
    ListProductAfterSalesOrder(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `v1/products/after-sales/orders`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      if (request.pagination?.page) {
        queryParams.push(`pagination.page=${encodeURIComponent(request.pagination.page.toString())}`)
      }
      if (request.pagination?.size) {
        queryParams.push(`pagination.size=${encodeURIComponent(request.pagination.size.toString())}`)
      }
      if (request.productIds) {
        request.productIds.forEach((x) => {
          queryParams.push(`productIds=${encodeURIComponent(x.toString())}`)
        })
      }
      if (request.productNos) {
        request.productNos.forEach((x) => {
          queryParams.push(`productNos=${encodeURIComponent(x.toString())}`)
        })
      }
      if (request.types) {
        request.types.forEach((x) => {
          queryParams.push(`types=${encodeURIComponent(x.toString())}`)
        })
      }
      if (request.dateRange) {
        request.dateRange.forEach((x) => {
          queryParams.push(`dateRange=${encodeURIComponent(x.toString())}`)
        })
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }) as Promise<ListProductAfterSalesOrderReply>;
    },
    ListProductAfterSalesWarning(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `v1/products/after-sales/warnings`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      if (request.pagination?.page) {
        queryParams.push(`pagination.page=${encodeURIComponent(request.pagination.page.toString())}`)
      }
      if (request.pagination?.size) {
        queryParams.push(`pagination.size=${encodeURIComponent(request.pagination.size.toString())}`)
      }
      if (request.productIds) {
        request.productIds.forEach((x) => {
          queryParams.push(`productIds=${encodeURIComponent(x.toString())}`)
        })
      }
      if (request.productNos) {
        request.productNos.forEach((x) => {
          queryParams.push(`productNos=${encodeURIComponent(x.toString())}`)
        })
      }
      if (request.dateRange) {
        request.dateRange.forEach((x) => {
          queryParams.push(`dateRange=${encodeURIComponent(x.toString())}`)
        })
      }
      if (request.qualityProblemRateGte) {
        queryParams.push(`qualityProblemRateGte=${encodeURIComponent(request.qualityProblemRateGte.toString())}`)
      }
      if (request.qualityProblemQuantityGte) {
        queryParams.push(`qualityProblemQuantityGte=${encodeURIComponent(request.qualityProblemQuantityGte.toString())}`)
      }
      if (request.badReviewRateGte) {
        queryParams.push(`badReviewRateGte=${encodeURIComponent(request.badReviewRateGte.toString())}`)
      }
      if (request.badReviewQuantityGte) {
        queryParams.push(`badReviewQuantityGte=${encodeURIComponent(request.badReviewQuantityGte.toString())}`)
      }
      if (request.breakageRateGte) {
        queryParams.push(`breakageRateGte=${encodeURIComponent(request.breakageRateGte.toString())}`)
      }
      if (request.breakageQuantityGte) {
        queryParams.push(`breakageQuantityGte=${encodeURIComponent(request.breakageQuantityGte.toString())}`)
      }
      if (request.sevenDaysSalesGte) {
        queryParams.push(`sevenDaysSalesGte=${encodeURIComponent(request.sevenDaysSalesGte.toString())}`)
      }
      if (request.fourteenDaysSalesGte) {
        queryParams.push(`fourteenDaysSalesGte=${encodeURIComponent(request.fourteenDaysSalesGte.toString())}`)
      }
      if (request.thirtyDaysSalesGte) {
        queryParams.push(`thirtyDaysSalesGte=${encodeURIComponent(request.thirtyDaysSalesGte.toString())}`)
      }
      if (request.unitPriceGte) {
        queryParams.push(`unitPriceGte=${encodeURIComponent(request.unitPriceGte.toString())}`)
      }
      if (request.sort?.qualityProblemRate) {
        queryParams.push(`sort.qualityProblemRate=${encodeURIComponent(request.sort.qualityProblemRate.toString())}`)
      }
      if (request.sort?.badReviewRate) {
        queryParams.push(`sort.badReviewRate=${encodeURIComponent(request.sort.badReviewRate.toString())}`)
      }
      if (request.sort?.breakageRate) {
        queryParams.push(`sort.breakageRate=${encodeURIComponent(request.sort.breakageRate.toString())}`)
      }
      if (request.sort?.qualityProblemQuantity) {
        queryParams.push(`sort.qualityProblemQuantity=${encodeURIComponent(request.sort.qualityProblemQuantity.toString())}`)
      }
      if (request.sort?.badReviewQuantity) {
        queryParams.push(`sort.badReviewQuantity=${encodeURIComponent(request.sort.badReviewQuantity.toString())}`)
      }
      if (request.sort?.breakageQuantity) {
        queryParams.push(`sort.breakageQuantity=${encodeURIComponent(request.sort.breakageQuantity.toString())}`)
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }) as Promise<ListProductAfterSalesWarningReply>;
    },
    ListProductStockinOrder(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `v1/products/stockin/orders`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      if (request.pagination?.page) {
        queryParams.push(`pagination.page=${encodeURIComponent(request.pagination.page.toString())}`)
      }
      if (request.pagination?.size) {
        queryParams.push(`pagination.size=${encodeURIComponent(request.pagination.size.toString())}`)
      }
      if (request.productIds) {
        request.productIds.forEach((x) => {
          queryParams.push(`productIds=${encodeURIComponent(x.toString())}`)
        })
      }
      if (request.productNos) {
        request.productNos.forEach((x) => {
          queryParams.push(`productNos=${encodeURIComponent(x.toString())}`)
        })
      }
      if (request.positionNos) {
        request.positionNos.forEach((x) => {
          queryParams.push(`positionNos=${encodeURIComponent(x.toString())}`)
        })
      }
      if (request.status) {
        queryParams.push(`status=${encodeURIComponent(request.status.toString())}`)
      }
      if (request.purchaseOrderNo) {
        queryParams.push(`purchaseOrderNo=${encodeURIComponent(request.purchaseOrderNo.toString())}`)
      }
      if (request.dateRange) {
        request.dateRange.forEach((x) => {
          queryParams.push(`dateRange=${encodeURIComponent(x.toString())}`)
        })
      }
      if (request.warehouseId) {
        queryParams.push(`warehouseId=${encodeURIComponent(request.warehouseId.toString())}`)
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }) as Promise<ListProductStockinOrderReply>;
    },
    MarkProductStockinOrderAsCompleted(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `v1/products/stockin/orders/status/completed`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "PUT",
        body,
      }) as Promise<wellKnownEmpty>;
    },
    CreateProductQualityProblem(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `v1/products/quality/problems`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }) as Promise<ProductQualityProblem>;
    },
    UpdateProductQualityProblem(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.problemId) {
        throw new Error("missing required field request.problem_id");
      }
      const path = `v1/products/quality/problems/${request.problemId}`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "PUT",
        body,
      }) as Promise<ProductQualityProblem>;
    },
    DeleteProductQualityProblem(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.problemId) {
        throw new Error("missing required field request.problem_id");
      }
      const path = `v1/products/quality/problems/${request.problemId}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "DELETE",
        body,
      }) as Promise<wellKnownEmpty>;
    },
    ListProductQualityProblem(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `v1/products/quality/problems`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      if (request.pagination?.page) {
        queryParams.push(`pagination.page=${encodeURIComponent(request.pagination.page.toString())}`)
      }
      if (request.pagination?.size) {
        queryParams.push(`pagination.size=${encodeURIComponent(request.pagination.size.toString())}`)
      }
      if (request.productIds) {
        request.productIds.forEach((x) => {
          queryParams.push(`productIds=${encodeURIComponent(x.toString())}`)
        })
      }
      if (request.productNos) {
        request.productNos.forEach((x) => {
          queryParams.push(`productNos=${encodeURIComponent(x.toString())}`)
        })
      }
      if (request.warehouseId) {
        queryParams.push(`warehouseId=${encodeURIComponent(request.warehouseId.toString())}`)
      }
      if (request.supplierId) {
        queryParams.push(`supplierId=${encodeURIComponent(request.supplierId.toString())}`)
      }
      if (request.dateRange) {
        request.dateRange.forEach((x) => {
          queryParams.push(`dateRange=${encodeURIComponent(x.toString())}`)
        })
      }
      if (request.types) {
        request.types.forEach((x) => {
          queryParams.push(`types=${encodeURIComponent(x.toString())}`)
        })
      }
      if (request.status) {
        queryParams.push(`status=${encodeURIComponent(request.status.toString())}`)
      }
      if (request.source) {
        queryParams.push(`source=${encodeURIComponent(request.source.toString())}`)
      }
      if (request.mode) {
        queryParams.push(`mode=${encodeURIComponent(request.mode.toString())}`)
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }) as Promise<ListProductQualityProblemReply>;
    },
    GetProductQualityProblem(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.problemId) {
        throw new Error("missing required field request.problem_id");
      }
      const path = `v1/products/quality/problems/${request.problemId}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }) as Promise<ProductQualityProblem>;
    },
    StatsProductAfterSalesWarningCount(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `v1/products/statistics/after-sales/warnings/stats/count`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      if (request.dateRange) {
        request.dateRange.forEach((x) => {
          queryParams.push(`dateRange=${encodeURIComponent(x.toString())}`)
        })
      }
      if (request.productIds) {
        request.productIds.forEach((x) => {
          queryParams.push(`productIds=${encodeURIComponent(x.toString())}`)
        })
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }) as Promise<StatsProductAfterSalesWarningCountReply>;
    },
    StatsProductAfterSalesWarningTrend(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `v1/products/statistics/after-sales/warnings/stats/trend`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      if (request.type) {
        queryParams.push(`type=${encodeURIComponent(request.type.toString())}`)
      }
      if (request.dateRange) {
        request.dateRange.forEach((x) => {
          queryParams.push(`dateRange=${encodeURIComponent(x.toString())}`)
        })
      }
      if (request.productNos) {
        request.productNos.forEach((x) => {
          queryParams.push(`productNos=${encodeURIComponent(x.toString())}`)
        })
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }) as Promise<StatsProductAfterSalesWarningTrendReply>;
    },
    ListProductStockinStatisticsDetailByProduct(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `v1/products/stock/statistics/detail/product`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      if (request.pagination?.page) {
        queryParams.push(`pagination.page=${encodeURIComponent(request.pagination.page.toString())}`)
      }
      if (request.pagination?.size) {
        queryParams.push(`pagination.size=${encodeURIComponent(request.pagination.size.toString())}`)
      }
      if (request.dateRange) {
        request.dateRange.forEach((x) => {
          queryParams.push(`dateRange=${encodeURIComponent(x.toString())}`)
        })
      }
      if (request.warehouseId) {
        queryParams.push(`warehouseId=${encodeURIComponent(request.warehouseId.toString())}`)
      }
      if (request.types) {
        request.types.forEach((x) => {
          queryParams.push(`types=${encodeURIComponent(x.toString())}`)
        })
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }) as Promise<ListProductStockinStatisticsDetailByProductReply>;
    },
    ListProductStockinStatisticsDetailByPosition(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `v1/products/stock/statistics/detail/position`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      if (request.pagination?.page) {
        queryParams.push(`pagination.page=${encodeURIComponent(request.pagination.page.toString())}`)
      }
      if (request.pagination?.size) {
        queryParams.push(`pagination.size=${encodeURIComponent(request.pagination.size.toString())}`)
      }
      if (request.dateRange) {
        request.dateRange.forEach((x) => {
          queryParams.push(`dateRange=${encodeURIComponent(x.toString())}`)
        })
      }
      if (request.warehouseId) {
        queryParams.push(`warehouseId=${encodeURIComponent(request.warehouseId.toString())}`)
      }
      if (request.types) {
        request.types.forEach((x) => {
          queryParams.push(`types=${encodeURIComponent(x.toString())}`)
        })
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }) as Promise<ListProductStockinStatisticsDetailByPositionReply>;
    },
    GetProductStatistics(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `v1/products/statistics/analyze`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      if (request.dateRange) {
        request.dateRange.forEach((x) => {
          queryParams.push(`dateRange=${encodeURIComponent(x.toString())}`)
        })
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }) as Promise<GetProductStatisticsReply>;
    },
    GetProductAfterSalesStatisticsGroupBy(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `v1/products/statistics/after-sales-orders/custom`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      if (request.dateRange) {
        request.dateRange.forEach((x) => {
          queryParams.push(`dateRange=${encodeURIComponent(x.toString())}`)
        })
      }
      if (request.groupBy) {
        queryParams.push(`groupBy=${encodeURIComponent(request.groupBy.toString())}`)
      }
      if (request.afterSalesOrderTypes) {
        request.afterSalesOrderTypes.forEach((x) => {
          queryParams.push(`afterSalesOrderTypes=${encodeURIComponent(x.toString())}`)
        })
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }) as Promise<GetProductAfterSalesStatisticsGroupByReply>;
    },
    GetProductPreAndAfterSalesTrendStatistics(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `v1/products/statistics/pre-after-sales/trend`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      if (request.type) {
        queryParams.push(`type=${encodeURIComponent(request.type.toString())}`)
      }
      if (request.dateRange) {
        request.dateRange.forEach((x) => {
          queryParams.push(`dateRange=${encodeURIComponent(x.toString())}`)
        })
      }
      if (request.shopIds) {
        request.shopIds.forEach((x) => {
          queryParams.push(`shopIds=${encodeURIComponent(x.toString())}`)
        })
      }
      if (request.productNos) {
        request.productNos.forEach((x) => {
          queryParams.push(`productNos=${encodeURIComponent(x.toString())}`)
        })
      }
      if (request.afterSalesOrderTypes) {
        request.afterSalesOrderTypes.forEach((x) => {
          queryParams.push(`afterSalesOrderTypes=${encodeURIComponent(x.toString())}`)
        })
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }) as Promise<GetProductPreAndAfterSalesTrendStatisticsReply>;
    },
    GetProductQualityStatistics(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `v1/products/statistics/quality-problems`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      if (request.dateRange) {
        request.dateRange.forEach((x) => {
          queryParams.push(`dateRange=${encodeURIComponent(x.toString())}`)
        })
      }
      if (request.qualityProblemRateGte) {
        queryParams.push(`qualityProblemRateGte=${encodeURIComponent(request.qualityProblemRateGte.toString())}`)
      }
      if (request.qualityProblemQuantityGte) {
        queryParams.push(`qualityProblemQuantityGte=${encodeURIComponent(request.qualityProblemQuantityGte.toString())}`)
      }
      if (request.badReviewRateGte) {
        queryParams.push(`badReviewRateGte=${encodeURIComponent(request.badReviewRateGte.toString())}`)
      }
      if (request.badReviewQuantityGte) {
        queryParams.push(`badReviewQuantityGte=${encodeURIComponent(request.badReviewQuantityGte.toString())}`)
      }
      if (request.breakageRateGte) {
        queryParams.push(`breakageRateGte=${encodeURIComponent(request.breakageRateGte.toString())}`)
      }
      if (request.breakageQuantityGte) {
        queryParams.push(`breakageQuantityGte=${encodeURIComponent(request.breakageQuantityGte.toString())}`)
      }
      if (request.sevenDaysSalesGte) {
        queryParams.push(`sevenDaysSalesGte=${encodeURIComponent(request.sevenDaysSalesGte.toString())}`)
      }
      if (request.fourteenDaysSalesGte) {
        queryParams.push(`fourteenDaysSalesGte=${encodeURIComponent(request.fourteenDaysSalesGte.toString())}`)
      }
      if (request.thirtyDaysSalesGte) {
        queryParams.push(`thirtyDaysSalesGte=${encodeURIComponent(request.thirtyDaysSalesGte.toString())}`)
      }
      if (request.unitPriceGte) {
        queryParams.push(`unitPriceGte=${encodeURIComponent(request.unitPriceGte.toString())}`)
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }) as Promise<GetProductQualityStatisticsReply>;
    },
    ListProductAfterSalesCostStatisticsByType(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `v1/products/statistics/after-sales-orders/cost/type`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      if (request.dateRange) {
        request.dateRange.forEach((x) => {
          queryParams.push(`dateRange=${encodeURIComponent(x.toString())}`)
        })
      }
      if (request.productNos) {
        request.productNos.forEach((x) => {
          queryParams.push(`productNos=${encodeURIComponent(x.toString())}`)
        })
      }
      if (request.shopIds) {
        request.shopIds.forEach((x) => {
          queryParams.push(`shopIds=${encodeURIComponent(x.toString())}`)
        })
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }) as Promise<ListProductAfterSalesCostStatisticsByTypeReply>;
    },
    ListProductQualityProblemCostStatisticsByType(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `v1/products/statistics/quality-problems/type`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      if (request.dateRange) {
        request.dateRange.forEach((x) => {
          queryParams.push(`dateRange=${encodeURIComponent(x.toString())}`)
        })
      }
      if (request.productNos) {
        request.productNos.forEach((x) => {
          queryParams.push(`productNos=${encodeURIComponent(x.toString())}`)
        })
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }) as Promise<ListProductQualityProblemCostStatisticsByTypeReply>;
    },
  };
}
// An empty JSON object
type wellKnownEmpty = Record<never, never>;


// @@protoc_insertion_point(typescript-http-eof)
